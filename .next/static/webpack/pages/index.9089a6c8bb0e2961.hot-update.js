"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./components/game/computingWinner.js":
/*!********************************************!*\
  !*** ./components/game/computingWinner.js ***!
  \********************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   computingWinner: function() { return /* binding */ computingWinner; }\n/* harmony export */ });\nfunction computingWinner(cells, movedCellIndex) {\n    let seqSize = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 3;\n    const rows = computeRows(cells, {\n        x: movedCellIndex[0],\n        y: movedCellIndex[1]\n    }, seqSize);\n    for(let i = 0; i < 4; i++){\n        const isEqual = areCellsInRowEqual(rows[i], cells, seqSize);\n        if (isEqual) return isEqual;\n    }\n    return false;\n}\nconst areCellsInRowEqual = (row, cells, seqSize)=>{\n    for(let i = 0; i < row.length; i++){\n        let isLineBreak = false;\n        let ansRow = row[i];\n        for(let j = 1; j < seqSize; j++){\n            if (cells[row[i][j][0]][row[i][j][1]] !== cells[row[i][j - 1][0]][row[i][j - 1][1]] || !cells[row[i][j][0]][row[i][j][1]]) {\n                isLineBreak = true;\n                break;\n            }\n        }\n        if (!isLineBreak) return ansRow;\n    }\n    return undefined;\n};\nfunction computeRows(cells) {\n    let movedCellIndex = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {\n        x: 1,\n        y: 2\n    }, seqSize = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 3;\n    const line = cells[movedCellIndex.x].map((elem, index)=>index);\n    const rows = [\n        [],\n        [],\n        [],\n        []\n    ];\n    rows[0] = horizontal(movedCellIndex, seqSize, line);\n    rows[1] = vertical(movedCellIndex, seqSize, line);\n    rows[2] = obliquelyLeftToRight(movedCellIndex, seqSize, line);\n    rows[3] = obliquelyRightToLeft(movedCellIndex, seqSize, line);\n    return rows;\n}\nfunction horizontal() {\n    let movedCellIndex = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {\n        x: 2,\n        y: 2\n    }, seqSize = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 4, line = arguments.length > 2 ? arguments[2] : void 0;\n    // -\n    const row = [];\n    for(let i = 0; i < seqSize; i++){\n        const first = movedCellIndex.x - seqSize + i + 1;\n        const last = movedCellIndex.x + i;\n        if (line.includes(first) && line.includes(last)) row.push(line.slice(first, last + 1).map((elem)=>[\n                elem,\n                movedCellIndex.y\n            ]));\n    }\n    return row;\n}\nfunction vertical() {\n    let movedCellIndex = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {\n        x: 2,\n        y: 2\n    }, seqSize = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 3, line = arguments.length > 2 ? arguments[2] : void 0;\n    // |\n    const row = [];\n    for(let i = 0; i < seqSize; i++){\n        const first = movedCellIndex.y - seqSize + i + 1;\n        const last = movedCellIndex.y + i;\n        if (line.includes(first) && line.includes(last)) row.push(line.slice(first, last + 1).map((elem)=>[\n                movedCellIndex.x,\n                elem\n            ]));\n    }\n    return row;\n}\nfunction obliquelyLeftToRight() {\n    let movedCellIndex = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {\n        x: 1,\n        y: 2\n    }, seqSize = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 3, line = arguments.length > 2 ? arguments[2] : void 0;\n    // /\n    const row = [];\n    const seqArray = new Array(seqSize).fill(null).map((elem, index)=>index);\n    for(let i = 0; i < seqSize; i++){\n        const first = {\n            x: movedCellIndex.x - seqSize + i + 1,\n            y: movedCellIndex.y - seqSize + i + 1\n        };\n        const last = {\n            x: movedCellIndex.x + i,\n            y: movedCellIndex.y + i\n        };\n        if (line.includes(first.x) && line.includes(first.y) && line.includes(last.x) && line.includes(last.y)) row.push(seqArray.map((increment)=>[\n                first.x + increment,\n                first.y + increment\n            ]));\n    }\n    return row;\n}\nfunction obliquelyRightToLeft() {\n    let movedCellIndex = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {\n        x: 1,\n        y: 2\n    }, seqSize = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 3, line = arguments.length > 2 ? arguments[2] : void 0;\n    // \\\n    const row = [];\n    const seqArray = new Array(seqSize).fill(null).map((elem, index)=>index);\n    for(let i = 0; i < seqSize; i++){\n        const first = {\n            x: movedCellIndex.x + seqSize - i - 1,\n            y: movedCellIndex.y - seqSize + i + 1\n        };\n        const last = {\n            x: movedCellIndex.x - i,\n            y: movedCellIndex.y + i\n        };\n        if (line.includes(first.x) && line.includes(first.y) && line.includes(last.x) && line.includes(last.y)) row.push(seqArray.map((increment)=>[\n                first.x - increment,\n                first.y + increment\n            ]));\n    }\n    return row;\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Q0FDTEUsU0FBU1osR0FBRyxDQUFDZSxDQUFBQSxZQUFhO2dCQUFDUixNQUFNbkIsQ0FBQyxHQUFHMkI7Z0JBQVdSLE1BQU1sQixDQUFDLEdBQUcwQjthQUFVO0lBRTdFO0lBQ0EsT0FBT3RCO0FBQ1YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vY29tcG9uZW50cy9nYW1lL2NvbXB1dGluZ1dpbm5lci5qcz8yYjY1Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBjb21wdXRpbmdXaW5uZXIoY2VsbHMsIG1vdmVkQ2VsbEluZGV4LCBzZXFTaXplID0gMykge1xyXG4gICBjb25zdCByb3dzID0gY29tcHV0ZVJvd3MoXHJcbiAgICAgIGNlbGxzLFxyXG4gICAgICB7IHg6IG1vdmVkQ2VsbEluZGV4WzBdLCB5OiBtb3ZlZENlbGxJbmRleFsxXSB9LFxyXG4gICAgICBzZXFTaXplLFxyXG4gICApXHJcbiAgIGZvciAobGV0IGkgPSAwOyBpIDwgNDsgaSsrKSB7XHJcbiAgICAgIGNvbnN0IGlzRXF1YWwgPSBhcmVDZWxsc0luUm93RXF1YWwocm93c1tpXSwgY2VsbHMsIHNlcVNpemUpXHJcbiAgICAgIGlmIChpc0VxdWFsKSByZXR1cm4gaXNFcXVhbFxyXG4gICB9XHJcbiAgIHJldHVybiBmYWxzZVxyXG59XHJcblxyXG5jb25zdCBhcmVDZWxsc0luUm93RXF1YWwgPSAocm93LCBjZWxscywgc2VxU2l6ZSkgPT4ge1xyXG4gICBmb3IgKGxldCBpID0gMDsgaSA8IHJvdy5sZW5ndGg7IGkrKykge1xyXG4gICAgICBsZXQgaXNMaW5lQnJlYWsgPSBmYWxzZVxyXG4gICAgICBsZXQgYW5zUm93ID0gcm93W2ldXHJcbiAgICAgIGZvciAobGV0IGogPSAxOyBqIDwgc2VxU2l6ZTsgaisrKSB7XHJcbiAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgY2VsbHNbcm93W2ldW2pdWzBdXVtyb3dbaV1bal1bMV1dICE9PVxyXG4gICAgICAgICAgICAgICBjZWxsc1tyb3dbaV1baiAtIDFdWzBdXVtyb3dbaV1baiAtIDFdWzFdXSB8fFxyXG4gICAgICAgICAgICAhY2VsbHNbcm93W2ldW2pdWzBdXVtyb3dbaV1bal1bMV1dXHJcbiAgICAgICAgICkge1xyXG4gICAgICAgICAgICBpc0xpbmVCcmVhayA9IHRydWVcclxuICAgICAgICAgICAgYnJlYWtcclxuICAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoIWlzTGluZUJyZWFrKSByZXR1cm4gYW5zUm93XHJcbiAgIH1cclxuICAgcmV0dXJuIHVuZGVmaW5lZFxyXG59XHJcblxyXG5mdW5jdGlvbiBjb21wdXRlUm93cyhjZWxscywgbW92ZWRDZWxsSW5kZXggPSB7IHg6IDEsIHk6IDIgfSwgc2VxU2l6ZSA9IDMpIHtcclxuICAgY29uc3QgbGluZSA9IGNlbGxzW21vdmVkQ2VsbEluZGV4LnhdLm1hcCgoZWxlbSwgaW5kZXgpID0+IGluZGV4KVxyXG4gICBjb25zdCByb3dzID0gW1xyXG4gICAgICBbXSwgLy8gLVxyXG4gICAgICBbXSwgLy8gfFxyXG4gICAgICBbXSwgLy8gL1xyXG4gICAgICBbXSwgLy8gXFxcclxuICAgXVxyXG4gICByb3dzWzBdID0gaG9yaXpvbnRhbChtb3ZlZENlbGxJbmRleCwgc2VxU2l6ZSwgbGluZSlcclxuICAgcm93c1sxXSA9IHZlcnRpY2FsKG1vdmVkQ2VsbEluZGV4LCBzZXFTaXplLCBsaW5lKVxyXG4gICByb3dzWzJdID0gb2JsaXF1ZWx5TGVmdFRvUmlnaHQobW92ZWRDZWxsSW5kZXgsIHNlcVNpemUsIGxpbmUpXHJcbiAgIHJvd3NbM10gPSBvYmxpcXVlbHlSaWdodFRvTGVmdChtb3ZlZENlbGxJbmRleCwgc2VxU2l6ZSwgbGluZSlcclxuICAgcmV0dXJuIHJvd3NcclxufVxyXG5cclxuZnVuY3Rpb24gaG9yaXpvbnRhbChtb3ZlZENlbGxJbmRleCA9IHsgeDogMiwgeTogMiB9LCBzZXFTaXplID0gNCwgbGluZSkge1xyXG4gICAvLyAtXHJcbiAgIGNvbnN0IHJvdyA9IFtdXHJcblxyXG4gICBmb3IgKGxldCBpID0gMDsgaSA8IHNlcVNpemU7IGkrKykge1xyXG4gICAgICBjb25zdCBmaXJzdCA9IG1vdmVkQ2VsbEluZGV4LnggLSBzZXFTaXplICsgaSArIDFcclxuICAgICAgY29uc3QgbGFzdCA9IG1vdmVkQ2VsbEluZGV4LnggKyBpXHJcbiAgICAgIGlmIChsaW5lLmluY2x1ZGVzKGZpcnN0KSAmJiBsaW5lLmluY2x1ZGVzKGxhc3QpKVxyXG4gICAgICAgICByb3cucHVzaChsaW5lLnNsaWNlKGZpcnN0LCBsYXN0ICsgMSkubWFwKGVsZW0gPT4gW2VsZW0sIG1vdmVkQ2VsbEluZGV4LnldKSlcclxuICAgfVxyXG4gICByZXR1cm4gcm93XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHZlcnRpY2FsKG1vdmVkQ2VsbEluZGV4ID0geyB4OiAyLCB5OiAyIH0sIHNlcVNpemUgPSAzLCBsaW5lKSB7XHJcbiAgIC8vIHxcclxuICAgY29uc3Qgcm93ID0gW11cclxuXHJcbiAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2VxU2l6ZTsgaSsrKSB7XHJcbiAgICAgIGNvbnN0IGZpcnN0ID0gbW92ZWRDZWxsSW5kZXgueSAtIHNlcVNpemUgKyBpICsgMVxyXG4gICAgICBjb25zdCBsYXN0ID0gbW92ZWRDZWxsSW5kZXgueSArIGlcclxuICAgICAgaWYgKGxpbmUuaW5jbHVkZXMoZmlyc3QpICYmIGxpbmUuaW5jbHVkZXMobGFzdCkpXHJcbiAgICAgICAgIHJvdy5wdXNoKGxpbmUuc2xpY2UoZmlyc3QsIGxhc3QgKyAxKS5tYXAoZWxlbSA9PiBbbW92ZWRDZWxsSW5kZXgueCwgZWxlbV0pKVxyXG4gICB9XHJcbiAgIHJldHVybiByb3dcclxufVxyXG5cclxuZnVuY3Rpb24gb2JsaXF1ZWx5TGVmdFRvUmlnaHQobW92ZWRDZWxsSW5kZXggPSB7IHg6IDEsIHk6IDIgfSwgc2VxU2l6ZSA9IDMsIGxpbmUpIHtcclxuICAgLy8gL1xyXG4gICBjb25zdCByb3cgPSBbXVxyXG4gICBjb25zdCBzZXFBcnJheSA9IG5ldyBBcnJheShzZXFTaXplKS5maWxsKG51bGwpLm1hcCgoZWxlbSwgaW5kZXgpID0+IGluZGV4KVxyXG5cclxuICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZXFTaXplOyBpKyspIHtcclxuICAgICAgY29uc3QgZmlyc3QgPSB7XHJcbiAgICAgICAgIHg6IG1vdmVkQ2VsbEluZGV4LnggLSBzZXFTaXplICsgaSArIDEsXHJcbiAgICAgICAgIHk6IG1vdmVkQ2VsbEluZGV4LnkgLSBzZXFTaXplICsgaSArIDEsXHJcbiAgICAgIH1cclxuICAgICAgY29uc3QgbGFzdCA9IHtcclxuICAgICAgICAgeDogbW92ZWRDZWxsSW5kZXgueCArIGksXHJcbiAgICAgICAgIHk6IG1vdmVkQ2VsbEluZGV4LnkgKyBpLFxyXG4gICAgICB9XHJcbiAgICAgIGlmIChcclxuICAgICAgICAgbGluZS5pbmNsdWRlcyhmaXJzdC54KSAmJlxyXG4gICAgICAgICBsaW5lLmluY2x1ZGVzKGZpcnN0LnkpICYmXHJcbiAgICAgICAgIGxpbmUuaW5jbHVkZXMobGFzdC54KSAmJlxyXG4gICAgICAgICBsaW5lLmluY2x1ZGVzKGxhc3QueSlcclxuICAgICAgKVxyXG4gICAgICAgICByb3cucHVzaChcclxuICAgICAgICAgICAgc2VxQXJyYXkubWFwKGluY3JlbWVudCA9PiBbZmlyc3QueCArIGluY3JlbWVudCwgZmlyc3QueSArIGluY3JlbWVudF0pLFxyXG4gICAgICAgICApXHJcbiAgIH1cclxuICAgcmV0dXJuIHJvd1xyXG59XHJcblxyXG5mdW5jdGlvbiBvYmxpcXVlbHlSaWdodFRvTGVmdChtb3ZlZENlbGxJbmRleCA9IHsgeDogMSwgeTogMiB9LCBzZXFTaXplID0gMywgbGluZSkge1xyXG4gICAvLyBcXFxyXG4gICBjb25zdCByb3cgPSBbXVxyXG5cclxuICAgY29uc3Qgc2VxQXJyYXkgPSBuZXcgQXJyYXkoc2VxU2l6ZSkuZmlsbChudWxsKS5tYXAoKGVsZW0sIGluZGV4KSA9PiBpbmRleClcclxuXHJcbiAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2VxU2l6ZTsgaSsrKSB7XHJcbiAgICAgIGNvbnN0IGZpcnN0ID0ge1xyXG4gICAgICAgICB4OiBtb3ZlZENlbGxJbmRleC54ICsgc2VxU2l6ZSAtIGkgLSAxLFxyXG4gICAgICAgICB5OiBtb3ZlZENlbGxJbmRleC55IC0gc2VxU2l6ZSArIGkgKyAxLFxyXG4gICAgICB9XHJcbiAgICAgIGNvbnN0IGxhc3QgPSB7XHJcbiAgICAgICAgIHg6IG1vdmVkQ2VsbEluZGV4LnggLSBpLFxyXG4gICAgICAgICB5OiBtb3ZlZENlbGxJbmRleC55ICsgaSxcclxuICAgICAgfVxyXG4gICAgICBpZiAoXHJcbiAgICAgICAgIGxpbmUuaW5jbHVkZXMoZmlyc3QueCkgJiZcclxuICAgICAgICAgbGluZS5pbmNsdWRlcyhmaXJzdC55KSAmJlxyXG4gICAgICAgICBsaW5lLmluY2x1ZGVzKGxhc3QueCkgJiZcclxuICAgICAgICAgbGluZS5pbmNsdWRlcyhsYXN0LnkpXHJcbiAgICAgIClcclxuICAgICAgICAgcm93LnB1c2goXHJcbiAgICAgICAgICAgIHNlcUFycmF5Lm1hcChpbmNyZW1lbnQgPT4gW2ZpcnN0LnggLSBpbmNyZW1lbnQsIGZpcnN0LnkgKyBpbmNyZW1lbnRdKSxcclxuICAgICAgICAgKVxyXG4gICB9XHJcbiAgIHJldHVybiByb3dcclxufVxyXG4iXSwibmFtZXMiOlsiY29tcHV0aW5nV2lubmVyIiwiY2VsbHMiLCJtb3ZlZENlbGxJbmRleCIsInNlcVNpemUiLCJyb3dzIiwiY29tcHV0ZVJvd3MiLCJ4IiwieSIsImkiLCJpc0VxdWFsIiwiYXJlQ2VsbHNJblJvd0VxdWFsIiwicm93IiwibGVuZ3RoIiwiaXNMaW5lQnJlYWsiLCJhbnNSb3ciLCJqIiwidW5kZWZpbmVkIiwibGluZSIsIm1hcCIsImVsZW0iLCJpbmRleCIsImhvcml6b250YWwiLCJ2ZXJ0aWNhbCIsIm9ibGlxdWVseUxlZnRUb1JpZ2h0Iiwib2JsaXF1ZWx5UmlnaHRUb0xlZnQiLCJmaXJzdCIsImxhc3QiLCJpbmNsdWRlcyIsInB1c2giLCJzbGljZSIsInNlcUFycmF5IiwiQXJyYXkiLCJmaWxsIiwiaW5jcmVtZW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./components/game/computingWinner.js\n"));

/***/ })

});