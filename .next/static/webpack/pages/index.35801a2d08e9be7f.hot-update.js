"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./components/game/model/computingWinner.js":
/*!**************************************************!*\
  !*** ./components/game/model/computingWinner.js ***!
  \**************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   computingWinner: function() { return /* binding */ computingWinner; }\n/* harmony export */ });\nfunction computingWinner(cells, movedCellIndex, seqSize) {\n    //вычисляем rows (группы последовательностей длины выигрышной последовательности, различной формы - горизонтальные, вертикальные и тд., которые могут содержать выигрышыми )\n    const rows = computeRows(cells, {\n        x: movedCellIndex[0],\n        y: movedCellIndex[1]\n    }, seqSize);\n    //проходим по всем rows и проверяем равны ли в них символы\n    for(let i = 0; i < 4; i++){\n        const isEqual = areCellsInRowEqual(rows[i], cells, seqSize);\n        if (isEqual) return isEqual;\n    }\n}\nconst areCellsInRowEqual = (row, cells, seqSize)=>{\n    for(let i = 0; i < row.length; i++){\n        let isLineBreak = false; //флаг ответает за то, равны ли все символы в row[i], true - значит не равны\n        let answerRow = row[i]; //row, в которой все символы равны\n        for(let j = 1; j < seqSize; j++){\n            //row[i] - i-ый row, row[i][j] - j-ый вектор (координата символа) в i-ом row\n            //if проверяет равны ли символы в точках j и j-1 i-ого row и не равен ли символ в точке j нулю (j-1 проверять не требуется)\n            if (cells[row[i][j][0]][row[i][j][1]] !== cells[row[i][j - 1][0]][row[i][j - 1][1]] || !cells[row[i][j][0]][row[i][j][1]]) {\n                isLineBreak = true;\n                break;\n            }\n        }\n        if (!isLineBreak) return answerRow;\n    }\n    return false;\n};\nfunction computeRows(cells, movedCellIndex, seqSize) {\n    const line = cells[movedCellIndex.x].map((elem, index)=>index); //массив от 0 до ширины cells, определяет границы массива\n    const seqArray = new Array(seqSize).fill(null).map((elem, index)=>index); //массив чисел от 0 до seqSize-1 включительно\n    const rows = [\n        [],\n        [],\n        [],\n        []\n    ];\n    rows[0] = horizontal(movedCellIndex, seqSize, line);\n    rows[1] = vertical(movedCellIndex, seqSize, line);\n    rows[2] = obliquelyLeftToRight(movedCellIndex, seqSize, line, seqArray);\n    rows[3] = obliquelyRightToLeft(movedCellIndex, seqSize, line, seqArray);\n    return rows;\n}\nfunction horizontal(movedCellIndex, seqSize, line) {\n    // -\n    const row = [];\n    for(let i = 0; i < seqSize; i++){\n        const first = movedCellIndex.x - seqSize + i + 1;\n        const last = movedCellIndex.x + i;\n        //if проверяет находятся ли first(начало секвенции) и last(конец) внутри границ массива\n        if (line.includes(first) && line.includes(last)) row.push(line.slice(first, last + 1).map((elem)=>[\n                elem,\n                movedCellIndex.y\n            ]));\n    }\n    return row;\n}\nfunction vertical(movedCellIndex, seqSize, line) {\n    // |\n    const row = [];\n    for(let i = 0; i < seqSize; i++){\n        const first = movedCellIndex.y - seqSize + i + 1;\n        const last = movedCellIndex.y + i;\n        //if проверяет находятся ли first(начало секвенции) и last(конец) внутри границ массива\n        if (line.includes(first) && line.includes(last)) row.push(line.slice(first, last + 1).map((elem)=>[\n                movedCellIndex.x,\n                elem\n            ]));\n    }\n    return row;\n}\nfunction obliquelyLeftToRight(movedCellIndex, seqSize, line, seqArray) {\n    // /\n    const row = [];\n    for(let i = 0; i < seqSize; i++){\n        const first = {\n            x: movedCellIndex.x - seqSize + i + 1,\n            y: movedCellIndex.y - seqSize + i + 1\n        };\n        const last = {\n            x: movedCellIndex.x + i,\n            y: movedCellIndex.y + i\n        };\n        //if проверяет находятся ли координаты first(x-координата и y-координата) и last(x-координата и y-координата) внутри границ массива\n        if (line.includes(first.x) && line.includes(first.y) && line.includes(last.x) && line.includes(last.y)) //в row кладется точки вида [first.x,first.y], [first.x + 1,first.y + 1]..., инкримент прибавляет единицу\n        row.push(seqArray.map((increment)=>[\n                first.x + increment,\n                first.y + increment\n            ]));\n    }\n    return row;\n}\nfunction obliquelyRightToLeft(movedCellIndex, seqSize, line, seqArray) {\n    // \\\n    const row = [];\n    for(let i = 0; i < seqSize; i++){\n        const first = {\n            x: movedCellIndex.x + seqSize - i - 1,\n            y: movedCellIndex.y - seqSize + i + 1\n        };\n        const last = {\n            x: movedCellIndex.x - i,\n            y: movedCellIndex.y + i\n        };\n        //if проверяет находятся ли координаты first(x-координата и y-координата) и last(x-координата и y-координата) внутри границ массива\n        if (line.includes(first.x) && line.includes(first.y) && line.includes(last.x) && line.includes(last.y)) //в row кладется точки вида [first.x,first.y], [first.x + 1,first.y + 1]..., инкримент прибавляет единицу\n        row.push(seqArray.map((increment)=>[\n                first.x - increment,\n                first.y + increment\n            ]));\n    }\n    return row;\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/game/model/computingWinner.js\n"));

/***/ })

});